package GUI;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

public class Tema3 extends javax.swing.JPanel {

    ArrayList<String> patterns = null;

    public Tema3() {
        initComponents();
        patterns = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneSplit = new javax.swing.JSplitPane();
        paneInputs = new javax.swing.JPanel();
        paneFile = new javax.swing.JPanel();
        lblFile = new javax.swing.JLabel();
        lblFill = new javax.swing.JLabel();
        txtFile = new javax.swing.JTextField();
        btnFile = new javax.swing.JButton();
        panePatterns = new javax.swing.JPanel();
        lblPatterns = new javax.swing.JLabel();
        lblFill1 = new javax.swing.JLabel();
        txtPatterns = new javax.swing.JTextField();
        btnPatterns = new javax.swing.JButton();
        paneAllPatterns = new javax.swing.JScrollPane();
        txtAllPatterns = new javax.swing.JTextArea();
        paneOptions = new javax.swing.JPanel();
        btnClear = new javax.swing.JButton();
        btnEvaluate = new javax.swing.JButton();
        paneOutput = new javax.swing.JPanel();
        paneTable = new javax.swing.JScrollPane();
        tblResults = new javax.swing.JTable();

        setMaximumSize(new java.awt.Dimension(907, 472));
        setMinimumSize(new java.awt.Dimension(770, 470));
        setLayout(new java.awt.GridLayout(1, 0));

        paneSplit.setDividerLocation(200);
        paneSplit.setFocusable(false);
        paneSplit.setMaximumSize(new java.awt.Dimension(1000, 500));
        paneSplit.setRequestFocusEnabled(false);

        paneInputs.setMaximumSize(new java.awt.Dimension(200, 500));
        paneInputs.setMinimumSize(new java.awt.Dimension(180, 400));
        paneInputs.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 2));

        paneFile.setMaximumSize(new java.awt.Dimension(180, 44));
        paneFile.setLayout(new java.awt.GridLayout(2, 2));

        lblFile.setText("Archivo");
        paneFile.add(lblFile);
        paneFile.add(lblFill);

        txtFile.setEditable(false);
        txtFile.setEnabled(false);
        txtFile.setFocusable(false);
        paneFile.add(txtFile);

        btnFile.setText("Seleccionar");
        btnFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileActionPerformed(evt);
            }
        });
        paneFile.add(btnFile);

        paneInputs.add(paneFile);

        panePatterns.setMaximumSize(new java.awt.Dimension(180, 44));
        panePatterns.setMinimumSize(new java.awt.Dimension(180, 44));
        panePatterns.setPreferredSize(new java.awt.Dimension(180, 44));
        panePatterns.setLayout(new java.awt.GridLayout(2, 2));

        lblPatterns.setText("Expresiones");
        panePatterns.add(lblPatterns);
        panePatterns.add(lblFill1);
        panePatterns.add(txtPatterns);

        btnPatterns.setText("Agregar");
        btnPatterns.setMaximumSize(new java.awt.Dimension(90, 22));
        btnPatterns.setMinimumSize(new java.awt.Dimension(90, 22));
        btnPatterns.setPreferredSize(new java.awt.Dimension(90, 22));
        btnPatterns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatternsActionPerformed(evt);
            }
        });
        panePatterns.add(btnPatterns);

        paneInputs.add(panePatterns);

        paneAllPatterns.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        paneAllPatterns.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        paneAllPatterns.setMaximumSize(new java.awt.Dimension(180, 240));
        paneAllPatterns.setMinimumSize(new java.awt.Dimension(180, 240));
        paneAllPatterns.setPreferredSize(new java.awt.Dimension(180, 240));

        txtAllPatterns.setEditable(false);
        txtAllPatterns.setColumns(20);
        txtAllPatterns.setRows(5);
        txtAllPatterns.setMaximumSize(new java.awt.Dimension(180, 240));
        txtAllPatterns.setMinimumSize(new java.awt.Dimension(180, 240));
        txtAllPatterns.setPreferredSize(new java.awt.Dimension(180, 240));
        paneAllPatterns.setViewportView(txtAllPatterns);

        paneInputs.add(paneAllPatterns);

        paneOptions.setPreferredSize(new java.awt.Dimension(180, 40));

        btnClear.setText("Limpiar");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        paneOptions.add(btnClear);

        btnEvaluate.setText("Evaluar");
        btnEvaluate.setEnabled(false);
        btnEvaluate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEvaluateActionPerformed(evt);
            }
        });
        paneOptions.add(btnEvaluate);

        paneInputs.add(paneOptions);

        paneSplit.setLeftComponent(paneInputs);

        paneOutput.setLayout(new java.awt.GridLayout(1, 1, 5, 5));

        tblResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lexema", "Regex"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblResults.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblResults.setFocusable(false);
        tblResults.getTableHeader().setReorderingAllowed(false);
        paneTable.setViewportView(tblResults);
        if (tblResults.getColumnModel().getColumnCount() > 0) {
            tblResults.getColumnModel().getColumn(0).setResizable(false);
            tblResults.getColumnModel().getColumn(1).setResizable(false);
        }

        paneOutput.add(paneTable);

        paneSplit.setRightComponent(paneOutput);

        add(paneSplit);
    }// </editor-fold>//GEN-END:initComponents

    private String GetLocationFromChooser(){
        String path = "";
        
        JFileChooser file = new JFileChooser();
        
        file.removeChoosableFileFilter(file.getAcceptAllFileFilter());
        
        FileFilter ff = new FileNameExtensionFilter("Archivos de Texto", "txt", "rtf");
        file.addChoosableFileFilter(ff);
        file.setFileFilter(ff);
        
        file.setMultiSelectionEnabled(false);
        file.setFileSelectionMode(JFileChooser.FILES_ONLY);
        file.setFileHidingEnabled(false);
        
        if (file.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            java.io.File f = file.getSelectedFile();
            System.out.println(f.getAbsolutePath());
            path = f.getAbsolutePath();
        }
        return path;
    }
    
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        patterns = new ArrayList<>();
        
        txtAllPatterns.setText("");
        //txtFile.setText("");
        
        btnEvaluate.setEnabled(false);
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnPatternsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatternsActionPerformed
       String pattern = txtPatterns.getText();
       patterns.add(pattern);
       
       String display = txtAllPatterns.getText();
       display += "\n" + patterns.size() + ". " + pattern;
       txtAllPatterns.setText(display);
       
       txtPatterns.setText("");
       
       if (!txtFile.getText().equals(""))
           btnEvaluate.setEnabled(true);
    }//GEN-LAST:event_btnPatternsActionPerformed

    private void btnFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileActionPerformed
        //open explorer and get file location
        String p = GetLocationFromChooser();
        if (!p.equals("")){
            txtFile.setText(p);
            if (!txtAllPatterns.getText().equals(""))
                btnEvaluate.setEnabled(true);
        }
        
    }//GEN-LAST:event_btnFileActionPerformed

    private void btnEvaluateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEvaluateActionPerformed
        Map<String, ArrayList> results = null;
        
        try{
            ArrayList<String> FileData = Logic.Tema3.GetFileData(txtFile.getText());

            results = Logic.Tema3.Evaluate(patterns, FileData);
            
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Lexema");
            model.addColumn("Regex");
            tblResults.setModel(model);
            
            for (String key : results.keySet())
            {
                ArrayList<String> values = results.get(key);
                ArrayList<Integer> indexes = Logic.Tema3.GetIndexes(values, patterns, 1);
                
                if (indexes.size() < 1)
                    model.insertRow(0, new Object[] {key, "N/A"});
                else
                    model.insertRow(0, new Object[] {key, indexes});
                
                System.out.println(key + ": " + values + indexes);
            }
        } catch (IOException e){
            JOptionPane.showMessageDialog(this, "Ocurrió un error con el archivo especificado.");
            System.out.println(e.getMessage());
        }
        
    }//GEN-LAST:event_btnEvaluateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnEvaluate;
    private javax.swing.JButton btnFile;
    private javax.swing.JButton btnPatterns;
    private javax.swing.JLabel lblFile;
    private javax.swing.JLabel lblFill;
    private javax.swing.JLabel lblFill1;
    private javax.swing.JLabel lblPatterns;
    private javax.swing.JScrollPane paneAllPatterns;
    private javax.swing.JPanel paneFile;
    private javax.swing.JPanel paneInputs;
    private javax.swing.JPanel paneOptions;
    private javax.swing.JPanel paneOutput;
    private javax.swing.JPanel panePatterns;
    private javax.swing.JSplitPane paneSplit;
    private javax.swing.JScrollPane paneTable;
    private javax.swing.JTable tblResults;
    private javax.swing.JTextArea txtAllPatterns;
    private javax.swing.JTextField txtFile;
    private javax.swing.JTextField txtPatterns;
    // End of variables declaration//GEN-END:variables
}
